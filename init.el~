
(require 'package)
(setq package-enable-at-startup nil)

(setq package-archives
      '(("gnu-cn" . "http://elpa.zilongshanren.com/gnu/")
        ("melpa-cn" . "http://elpa.zilongshanren.com/melpa/")
        ("melpa-stable-cn" . "	http://elpa.zilongshanren.com/melpa-stable/")
        ("marmalade-cn" . "http://elpa.zilongshanren.com/marmalade/")
        ("org-cn" . "http://elpa.zilongshanren.com/org/")))
(package-initialize)


;; -----------------------------------------------------------------------------
;; Use Package
;; -----------------------------------------------------------------------------


(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;;默认文件编码
(prefer-coding-system 'utf-8)

;;修改mac的comm按键为super
(setq mac-command-modifier 'super)

;;设置各种文件编码
(setq buffer-file-coding-system 'utf-8-unix
      default-file-name-coding-system 'utf-8-unix
      default-keyboard-coding-system 'utf-8-unix
      default-process-coding-system '(utf-8-unix . utf-8-unix)
      default-sendmail-coding-system 'utf-8-unix
      default-terminal-coding-system 'utf-8-unix)

;;设置鼠标滚动
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
      mouse-wheel-progressive-speed nil
      mouse-wheel-follow-mouse 't)

;;替换yes/no为y/n
(fset 'yes-or-no-p 'y-or-n-p)

(setq-default indent-tabs-mode nil)

;;关闭不需要的组件
(global-auto-revert-mode 1)
(scroll-bar-mode -1)
(tool-bar-mode -1)

;;-------------------------------------------------
;;绑定自定义快加减
;;-------------------------------------------------

;; C-x 2 | 3
;; C-x 1 current
;; C-x 0 close current
;; C-x o

;; C-g quit
;; C-h f  function -> key
;; C-h k  key -> function
(bind-key "s-o" 'find-file global-map)
(bind-key "s-s" 'save-buffer global-map)
(bind-key "s-c" 'kill-ring-save global-map)
(bind-key "s-v" 'yank global-map)
(bind-key "s-x" 'kill-region global-map)
(bind-key "s-e" 'switch-to-buffer global-map)
(bind-key "s-w" 'kill-buffer global-map)
(bind-key "<escape>" 'keyboard-escape-quit global-map)


;;项目管理
(use-package projectile
  :ensure t
  :init
  (projectile-mode))

;;补全
(use-package ivy
  :ensure t
  :init
  (ivy-mode 1))

;;目录树
(use-package neotree
  :ensure t
  :bind
  (("s-\\" . neotree-toggle)))
;;主题
(use-package zenburn-theme
  :ensure t
  :init
  (load-theme 'zenburn t))

;;括号
(use-package paredit
  :ensure t
  :init
  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'cider-repl-mode-hook 'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode))

;;clojure支持
(use-package clojure-mode
  :ensure t)

;;clojure repl支持
(use-package cider
  :ensure t
  :bind
  (:map cider-mode-map
	("C-c <tab>" . cider-inspect-last-result))
  :init
  (setq cider-prompt-for-symbol nil)
  (setq cider-lein-command "/usr/local/bin/lein"))

;;命令修复
(use-package exec-path-from-shell
  :ensure t)

(use-package aggressive-indent
  :ensure t
  :init
  (add-hook 'clojure-mode-hook 'aggressive-indent-mode)
  (add-hook 'clojure-repl-mode-hook 'aggressive-indent-mode)
  (add-hook 'emacs-lisp-mode-hook 'aggressive-indent-mode))
;;切换窗口
(use-package ace-window
  :ensure t
  :bind
  (("C-x C-x" . ace-window))
  :init
  (setq aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n)))

;;彩虹括号
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode))

;;远程nrepl
(use-package monroe
  :ensure t)

;;git修改该提示
(use-package git-gutter
  :ensure t
  :init
  (global-git-gutter-mode))

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))


;;org-mode加强
(use-package org
  :init
  (setq org-src-fontify-natively t)
  (setq org-hide-leading-stars t)
  (setq org-log-into-drawer t)
  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
  (add-hook 'org-mode-hook
	    (lambda ()
	      (setq org-src-ask-before-returning-to-edit-buffer nil)
	      (org-indent-mode 1))))

(use-package org-plus-contrib)


(use-package hugsql-ghosts
  :ensure t
  :init
  (add-hook 'cider-mode-hook 'hugsql-ghosts-install-hook))



(defun user/company-clojure-init ()
  (bind-key "TAB" 'company-indent-or-complete-common clojure-mode-map)
  (bind-key "<tab>" 'company-indent-or-complete-common clojure-mode-map))

(defun user/company-cider-repl-init ()
  (bind-key "<tab>" 'company-complete-common cider-repl-mode-map))

(defun user/company-eshell-init ()
  (bind-key "<tab>" 'company-complete-common eshell-mode-map))

(defun user/company-elisp-init ()
  (bind-key "TAB" 'company-indent-or-complete-common emacs-lisp-mode-map)
  (bind-key "<tab>" 'company-indent-or-complete-common emacs-lisp-mode-map))

(use-package company
  :bind
  (:map company-active-map
        ("<escape>" . company-abort)
        ("C-n" . company-select-next)
        ("C-p" . company-select-previous))
  :init
  (add-hook 'emacs-lisp-mode-hook #'user/company-elisp-init)
  (add-hook 'clojure-mode-hook #'user/company-clojure-init)
  (add-hook 'eshell-mode-hook #'user/company-eshell-init)
  (add-hook 'cider-repl-mode-hook #'user/company-cider-repl-init)
  (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
  (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion)
                                        ;(setq company-idle-delay nil)
  (global-company-mode))


;;搜索
(use-package counsel
  :ensure t
  :bind
  (("C-c g" . counsel-git)
   ("C-c G" . counsel-git-grep)
   ("C-c C-s" . swiper)
   ("C-c m" . counsel-imenu)
   ("C-c A" . counsel-ag)
   :map ivy-minibuffer-map
   ("<tab>" . ivy-alt-done)
   ("<escape>" . minibuffer-keyboard-quit)
   ("C-r" . counsel-expression-history)))

(use-package counsel-projectile
  :ensure t
  :init
  (setq projectile-completion-system 'ivy)
  (counsel-projectile-on))


;; Set font
(add-hook 'org-mode-hook
          (lambda ()
            (face-remap-add-relative 'default :family "Iosevka Slab")))


;;背景透明
(global-set-key [(f8)] 'loop-alpha)  ;;注意这行中的F8 , 可以改成你想要的按键  

(setq alpha-list '((98 100) (100 100)))  

(defun loop-alpha ()  
  (interactive)  
  (let ((h (car alpha-list)))                  
    ((lambda (a ab)  
       (set-frame-parameter (selected-frame) 'alpha (list a ab))  
       (add-to-list 'default-frame-alist (cons 'alpha (list a ab)))  
       ) (car h) (car (cdr h)))  
    (setq alpha-list (cdr (append alpha-list (list h))))  
    )
  )  



(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (counsel-projectile counsel hugsql-ghosts markdown-mode git-gutter monroe rainbow-delimiters ace-window aggressive-indent projectile neotree exec-path-from-shell ivy cider clojure-mode zenburn-theme paredit company use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
